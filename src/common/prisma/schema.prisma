// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  engineType    = "binary"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TransactionType {
  Deposit
  Withdrawal
}

model User {
  id           String        @id @default(uuid()) @db.Uuid
  name         String        @db.VarChar(100)
  email        String        @unique @db.VarChar(100)
  password     String        @db.VarChar(100)
  status       Boolean       @default(true) @db.Boolean
  createdAt    DateTime      @default(now()) @db.Timestamptz(6)
  createdBy    String?       @db.Uuid
  updatedAt    DateTime      @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy    String?       @db.Uuid
  transactions Transaction[]

  @@map("user")
}

model Transaction {
  id              String          @id @default(uuid()) @db.Uuid
  userId          String          @db.Uuid
  amount          Float           @default(0) @db.DoublePrecision()
  balance         Float           @default(0) @db.DoublePrecision()
  transactionType TransactionType
  description     String?         @db.Text
  status          Boolean         @default(true) @db.Boolean
  createdAt       DateTime        @default(now()) @db.Timestamptz(6)
  createdBy       String?         @db.Uuid
  updatedAt       DateTime        @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy       String?         @db.Uuid
  user            User            @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([userId, amount, balance, transactionType, description, status, createdAt, createdBy])
  @@map("transaction")
}
